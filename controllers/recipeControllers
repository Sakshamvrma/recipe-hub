const express = require('express')
const Recipe=require('../models/recipeModel')
const catchAsync=require('../utils/catchAsync')
const AppError=require('../utils/appError')


exports.createRecipe=catchAsync(async(req,res,next)=>{
  const recipe=await Recipe.create(req.body);
  res.status(201).json({
    status:'success',
    data:{
      recipe
    }
  })

})
exports.getAllRecipes=catchAsync(async(req,res,next)=>{
  const recipes=await Recipe.find()
  res.status(200).json({
    status:'success',
    results:recipes.length,
    data:{
      recipes
    }
  })
})
exports.getRecipe=catchAsync(async(req,res,next)=>{
  
  const recipe=await Recipe.findById(req.params.id);
  
  if (!recipe) {
    return next(new AppError('No tour found with that ID', 404));
  }
res.status(201).json({
    status:'success',
    data:recipe
  })
}
)
exports.updateRecipe=catchAsync(async(req,res,next)=>{
  const updatedtour=await Recipe.findByIdAndUpdate(req.params.id,req.body,{
    new:true,
    runValidators:true
  })
  res.status(200).json({
    status:'success',
    data:{
      updatedtour
    }
  })
  })
  exports.deleteRecipe=catchAsync(async(req,res,next)=>{
    const recipe=await Recipe.findByIdAndDelete(req.params.id);
    if (!recipe) {
      return next(new AppError('No tour found with that ID', 404));
    }
    res.status(204).json({
      status:'success',
      recipe:null
    })
  })